
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/library.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}




  const path = require('path')

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  referralCode: 'referralCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.OrganizerProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  npwp: 'npwp',
  bankAccount: 'bankAccount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startDateTime: 'startDateTime',
  location: 'location',
  category: 'category',
  isActive: 'isActive',
  organizerId: 'organizerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TicketTypeScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  name: 'name',
  description: 'description',
  price: 'price',
  quota: 'quota',
  isAvailable: 'isAvailable',
  isSeated: 'isSeated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventId: 'eventId',
  promotionId: 'promotionId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  redemptionPoints: 'redemptionPoints',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TransactionItemScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  ticketTypeId: 'ticketTypeId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  discountApplied: 'discountApplied',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  ownerId: 'ownerId',
  transactionItemId: 'transactionItemId',
  ticketCode: 'ticketCode',
  status: 'status',
  isActive: 'isActive',
  seatNumber: 'seatNumber',
  isSeated: 'isSeated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  transactionId: 'transactionId',
  method: 'method',
  status: 'status',
  paidAt: 'paidAt',
  currency: 'currency',
  transactionReference: 'transactionReference',
  providerResponse: 'providerResponse',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventId: 'eventId',
  rating: 'rating',
  comment: 'comment',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PointScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  expirationDate: 'expirationDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  referrerId: 'referrerId',
  referredUserId: 'referredUserId',
  discountAmount: 'discountAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PromotionScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  code: 'code',
  discountAmount: 'discountAmount',
  discountType: 'discountType',
  isReferralPromo: 'isReferralPromo',
  maxRedemptions: 'maxRedemptions',
  usedRedemptions: 'usedRedemptions',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  details: 'details',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UsersRoleEnum = exports.$Enums.UsersRoleEnum = {
  customer: 'customer',
  organizer: 'organizer'
};

exports.TransactionStatusEnum = exports.$Enums.TransactionStatusEnum = {
  pending: 'pending',
  paid: 'paid',
  cancelled: 'cancelled',
  expired: 'expired',
  refunded: 'refunded'
};

exports.TicketStatusEnum = exports.$Enums.TicketStatusEnum = {
  available: 'available',
  sold: 'sold',
  checked_in: 'checked_in',
  cancelled: 'cancelled'
};

exports.EventCategoryEnum = exports.$Enums.EventCategoryEnum = {
  music: 'music',
  sport: 'sport',
  seminar: 'seminar',
  workshop: 'workshop',
  conference: 'conference',
  other: 'other'
};

exports.PaymentMethodEnum = exports.$Enums.PaymentMethodEnum = {
  GOPAY: 'GOPAY',
  OVO: 'OVO',
  DANA: 'DANA',
  SHOPEEPAY: 'SHOPEEPAY',
  BCA_TRANSFER: 'BCA_TRANSFER',
  MANDIRI_TRANSFER: 'MANDIRI_TRANSFER',
  FREE: 'FREE'
};

exports.PaymentStatusEnum = exports.$Enums.PaymentStatusEnum = {
  pending: 'pending',
  success: 'success',
  failed: 'failed',
  refunded: 'refunded'
};

exports.DiscountTypeEnum = exports.$Enums.DiscountTypeEnum = {
  fixed: 'fixed',
  percentage: 'percentage'
};

exports.AuditLogActionEnum = exports.$Enums.AuditLogActionEnum = {
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  CREATE_EVENT: 'CREATE_EVENT',
  UPDATE_EVENT: 'UPDATE_EVENT',
  PURCHASE_TICKET: 'PURCHASE_TICKET',
  REFUND: 'REFUND'
};

exports.Prisma.ModelName = {
  User: 'User',
  OrganizerProfile: 'OrganizerProfile',
  Event: 'Event',
  TicketType: 'TicketType',
  Transaction: 'Transaction',
  TransactionItem: 'TransactionItem',
  Ticket: 'Ticket',
  Payment: 'Payment',
  Review: 'Review',
  Point: 'Point',
  Referral: 'Referral',
  Promotion: 'Promotion',
  AuditLog: 'AuditLog'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\hasbi\\Desktop\\mini_project\\eventup\\pwd-template-api-master\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\hasbi\\Desktop\\mini_project\\eventup\\pwd-template-api-master\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../../.env",
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.7.0",
  "engineVersion": "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },

  "copyEngine": true
}

const fs = require('fs')

config.dirname = __dirname
if (!fs.existsSync(path.join(__dirname, 'schema.prisma'))) {
  const alternativePaths = [
    "src/generated/prisma",
    "generated/prisma",
  ]
  
  const alternativePath = alternativePaths.find((altPath) => {
    return fs.existsSync(path.join(process.cwd(), altPath, 'schema.prisma'))
  }) ?? alternativePaths[0]

  config.dirname = path.join(process.cwd(), alternativePath)
  config.isBundled = true
}


defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = undefined
config.compilerWasm = undefined


const { warnEnvConflicts } = require('./runtime/library.js')

warnEnvConflicts({
    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),
    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)
})

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

// file annotations for bundling tools to include these files
path.join(__dirname, "query_engine-windows.dll.node");
path.join(process.cwd(), "src/generated/prisma/query_engine-windows.dll.node")
// file annotations for bundling tools to include these files
path.join(__dirname, "schema.prisma");
path.join(process.cwd(), "src/generated/prisma/schema.prisma")
